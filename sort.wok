#!/usr/bin/wok -f

/** sort.wok
  * 
  * Usage:
  *   java -jar wok-0.1.0.jar -f sort.wok -v idx=0 -v@str format=str -v@str order=asc input > output
  *
  * Option:
  *   -v idx:         The index number of the reference column to sort rows. This value must be larger than or equal to zero.
  *   -v@str format:  This value specifies the data type of cells of the column specified by `idx`. 
  *                   Possible options are `str`, `int` and `float`.
  *   -v@str order:   This value specifies the sorting order of the result. Possible options are `asc` and `desc`.
  */

FS = '\t'
FQ = Quote.Min
OFS = '\t'
OFQ = Quote.All

val asc = order.toLowerCase match {
  case "a"| "asc" => true
  case "d"| "desc" => false
}

val sorter = format.toLowerCase match {
  case "s" | "str" | "string" => 
    if (asc) (a: List[String], b: List[String]) => a(idx).toLowerCase < b(idx).toLowerCase
    else     (a: List[String], b: List[String]) => a(idx).toLowerCase > b(idx).toLowerCase
  case "i" | "int" | "long" =>
    if (asc) (a: List[String], b: List[String]) => a(idx).toLong < b(idx).toLong
    else     (a: List[String], b: List[String]) => a(idx).toLong > b(idx).toLong
  case "f" | "float" | "double" => 
    if (asc) (a: List[String], b: List[String]) => a(idx).toDouble < b(idx).toDouble
    else     (a: List[String], b: List[String]) => a(idx).toDouble > b(idx).toDouble
}

In { _.toList }
  .sortWith(sorter)
  .foreach (row => println(row: _*))
